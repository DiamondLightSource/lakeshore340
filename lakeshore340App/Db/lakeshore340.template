################################################################
#
# Lakeshore 340 Temperature Controller template file.
#
# Macros:
#   P - Prefix for PV name
#   PORT - Bus/Port Address (eg. ASYN Port).
#   ADDR - Address on the bus (optional)
#   TEMPSCAN - SCAN rate for the temperature/voltage readings
#   SCAN - SCAN rate for non-temperature/voltage parameters.
#
# Notes: The temperatures in Kelvin are archived once every 10 secs.
#
################################################################


################################################################
# Set records
################################################################

# /// 
# /// Read the ID string from the device.
# ///
record(stringin, "$(P):ID") {
  field(DTYP, "stream")
  field(INP, "@lakeshore340.proto getID $(PORT) $(ADDR)")
  field(SCAN, "$(SCAN) second")
}

# /// 
# /// Read the heater output value.
# ///
record(ai, "$(P):HTR") {
  field(DTYP, "stream")
  field(INP, "@lakeshore340.proto getHTR $(PORT) $(ADDR)")
  field(SCAN, "$(SCAN) second")
}

# /// 
# /// Read the setpoint temperature.
# ///
record(ai, "$(P):SETP") {
  field(DTYP, "stream")
  field(INP, "@lakeshore340.proto getSETP $(PORT) $(ADDR)")
  field(SCAN, "$(SCAN) second")
}

# /// 
# /// Read the temperature on channel 0 in Kelvin.
# /// This is archived every 10 seconds.
# ///
#% archiver 10
record(ai, "$(P):KRDG0") {
  field(DTYP, "stream")
  field(INP, "@lakeshore340.proto getKRDG(0) $(PORT) $(ADDR)")
  field(SCAN, "$(TEMPSCAN) second")
}

# /// 
# /// Read the temperature on channel 1 in Kelvin.
# /// This is archived every 10 seconds.
# ///
#% archiver 10
record(ai, "$(P):KRDG1") {
  field(DTYP, "stream")
  field(INP, "@lakeshore340.proto getKRDG(1) $(PORT) $(ADDR)")
  field(SCAN, "$(TEMPSCAN) second")
}

# /// 
# /// Read the temperature on channel 2 in Kelvin.
# /// This is archived every 10 seconds.
# ///
#% archiver 10
record(ai, "$(P):KRDG2") {
  field(DTYP, "stream")
  field(INP, "@lakeshore340.proto getKRDG(2) $(PORT) $(ADDR)")
  field(SCAN, "$(TEMPSCAN) second")
}

# /// 
# /// Read the temperature on channel 3 in Kelvin.
# /// This is archived every 10 seconds.
# ///
#% archiver 10
record(ai, "$(P):KRDG3") {
  field(DTYP, "stream")
  field(INP, "@lakeshore340.proto getKRDG(3) $(PORT) $(ADDR)")
  field(SCAN, "$(TEMPSCAN) second")
}

# /// 
# /// Read the raw voltage on channel 0.
# ///
record(ai, "$(P):SRDG0") {
  field(DTYP, "stream")
  field(INP, "@lakeshore340.proto getSRDG(0) $(PORT) $(ADDR)")
field(SCAN, "$(TEMPSCAN) second")
}

# /// 
# /// Read the raw voltage on channel 1.
# ///
record(ai, "$(P):SRDG1") {
  field(DTYP, "stream")
  field(INP, "@lakeshore340.proto getSRDG(1) $(PORT) $(ADDR)")
  field(SCAN, "$(TEMPSCAN) second")
}

# /// 
# /// Read the raw voltage on channel 2.
# ///
record(ai, "$(P):SRDG2") {
  field(DTYP, "stream")
  field(INP, "@lakeshore340.proto getSRDG(2) $(PORT) $(ADDR)")
  field(SCAN, "$(TEMPSCAN) second")
}

# /// 
# /// Read the raw voltage on channel 3.
# ///
record(ai, "$(P):SRDG3") {
  field(DTYP, "stream")
  field(INP, "@lakeshore340.proto getSRDG(3) $(PORT) $(ADDR)")
  field(SCAN, "$(TEMPSCAN) second")
}

# /// 
# /// Read the range parameter (the heater output power range).
# ///
record(ai, "$(P):RANGE") {
  field(DTYP, "stream")
  field(INP, "@lakeshore340.proto getRANGE $(PORT) $(ADDR)")
  field(SCAN, "$(SCAN) second")
}

# /// 
# /// Read the ramp paremeter.
# ///
record(ai, "$(P):RAMP") {
  field(DTYP, "stream")
  field(INP, "@lakeshore340.proto getRAMP $(PORT) $(ADDR)")
  field(SCAN, "$(SCAN) second")
}

# /// 
# /// Read the ramp status parameter.
# .
# /// 0=off
# /// 1=on
# ///
record(ai, "$(P):RAMPST") {
  field(DTYP, "stream")
  field(INP, "@lakeshore340.proto getRAMPSTATUS $(PORT) $(ADDR)")
  field(SCAN, "$(SCAN) second")
}

################################################################
# Set records
################################################################

# /// 
# /// Set the setpoint temperature.
# ///
record(ao, "$(P):SETP_S") {
  field(DTYP, "stream")
  field(OUT, "@lakeshore340.proto setSETP $(PORT) $(ADDR)")
}

# /// 
# /// Set the range parameter.
# .
# /// Possible values are: 0, 1, 2, 3, 4, 5
# ///
record(ao, "$(P):RANGE_S") {
  field(DTYP, "stream")
  field(OUT, "@lakeshore340.proto setRANGE $(PORT) $(ADDR)")
}

# /// 
# /// Set the ramp rate parameter.
# .
# /// This is the desired temperate increase/decrease rate
# /// per second when heating/cooling.
# .
# /// The ramp and ramp status parameters are actually one command
# /// for the lakeshore 340. Therefore one must pass into this
# /// record the existing/desired ramp status, as well as the 
# /// desired ramp. This is done automatically by reading the 
# /// PV which holds the current ramp status.
# ///
record(ao, "$(P):RAMP_S") {
  field(DTYP, "stream")
  field(OUT, "@lakeshore340.proto setRAMP($(P):RAMPST) $(PORT) $(ADDR)")
}

# /// 
# /// Set the ramp status parameter.
# .
# /// 0=off
# /// 1=on
# .
# /// The ramp and ramp status parameters are actually one command
# /// for the lakeshore 340. Therefore one must pass into this
# /// record the existing/desired ramp, as well as the 
# /// desired ramp status. This is done automatically by reading the 
# /// PV which holds the current ramp value.
# ///
record(ao, "$(P):RAMPST_S") {
  field(DTYP, "stream")
  field(OUT, "@lakeshore340.proto setRAMPSTATUS($(P):RAMP) $(PORT) $(ADDR)")
}
